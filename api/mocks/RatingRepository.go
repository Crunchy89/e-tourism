// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	domain "api/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	r "api/utils/r"
)

// RatingRepository is an autogenerated mock type for the RatingRepository type
type RatingRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, d
func (_m *RatingRepository) Add(ctx context.Context, d *domain.Rating) (primitive.ObjectID, r.Ex) {
	ret := _m.Called(ctx, d)

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Rating) primitive.ObjectID); ok {
		r0 = rf(ctx, d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	var r1 r.Ex
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Rating) r.Ex); ok {
		r1 = rf(ctx, d)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(r.Ex)
		}
	}

	return r0, r1
}

// FetchAll provides a mock function with given fields: ctx
func (_m *RatingRepository) FetchAll(ctx context.Context) ([]*domain.Rating, r.Ex) {
	ret := _m.Called(ctx)

	var r0 []*domain.Rating
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Rating); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Rating)
		}
	}

	var r1 r.Ex
	if rf, ok := ret.Get(1).(func(context.Context) r.Ex); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(r.Ex)
		}
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: ctx, ID
func (_m *RatingRepository) FetchByID(ctx context.Context, ID primitive.ObjectID) (*domain.Rating, r.Ex) {
	ret := _m.Called(ctx, ID)

	var r0 *domain.Rating
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *domain.Rating); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rating)
		}
	}

	var r1 r.Ex
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) r.Ex); ok {
		r1 = rf(ctx, ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(r.Ex)
		}
	}

	return r0, r1
}

type NewRatingRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRatingRepository creates a new instance of RatingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRatingRepository(t NewRatingRepositoryT) *RatingRepository {
	mock := &RatingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
